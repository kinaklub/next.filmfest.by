# -*- coding: utf-8 -*-
# Generated by Django 1.9.8 on 2016-08-27 22:21
from __future__ import unicode_literals

from functools import partial
import json
import os

from django.core.files import File
from django.db import migrations

from cpm_generic.migration_utils import get_image_model


DATA_DIR = os.path.join(os.path.dirname(__file__), '0008')


def _get_data(season_name):
    with open(os.path.join(DATA_DIR, '%s.json' % season_name)) as data_file:
        return json.load(data_file)


def _get_image_path(filename):
    return os.path.join(DATA_DIR, 'images', filename)


def _get_season(apps, season_name):
    Season = apps.get_model('cpm_data.Season')
    return Season.objects.get(name_en=season_name)


def add_partners(apps, schema_editor, season_name):
    Partner = apps.get_model('cpm_data.Partner')
    SeasonRelatedPartner = apps.get_model('cpm_data.SeasonRelatedPartner')
    Image = get_image_model(apps)
    Collection = apps.get_model('wagtailcore.Collection')

    collection_id = Collection.objects.filter(depth=1)[0]
    season = _get_season(apps, season_name)

    for item in sorted(_get_data(season_name), reverse=True):

        image = Image(title=item['name_en'], collection=collection_id)
        with open(_get_image_path(item['image']), 'rb') as image_file:
            image.file.save(name=item['image'], content=File(image_file))
            image.save()

        partner, _created = Partner.objects.get_or_create(
            name_en=item['name_en'],
            name_be=item['name_be'],
            name_ru=item['name_ru'],
            link=item['link'],
            image=image
        )

        SeasonRelatedPartner(season=season, partner=partner).save()


def remove_partners(apps, schema_editor, season_name):
    Partner = apps.get_model('cpm_data.Partner')
    SeasonRelatedPartner = apps.get_model('cpm_data.SeasonRelatedPartner')

    season = _get_season(apps, season_name)
    names = [item['name_en'] for item in _get_data(season_name)]
    partners = Partner.objects.filter(name_en__in=names)

    SeasonRelatedPartner.objects.filter(
        season=season,
        partner__in=partners,
    ).delete()
    for partner in partners:
        if not SeasonRelatedPartner.objects.filter(partner=partner).exists():
            partner.delete()


class Migration(migrations.Migration):

    dependencies = [
        ('cpm_data', '0007_add_jury_data_2014'),
    ]

    operations = [
        migrations.RunPython(
            partial(add_partners, season_name=season_name),
            partial(remove_partners, season_name=season_name)
        ) for season_name in ['2012', '2013', '2015']
    ]
